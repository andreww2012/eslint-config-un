diff --git a/index.js b/index.js
index 6d1529ace6fd68521b7965a24ab9922138b4761d..1281a6fcba519ac773fa71b3af7a61370029b379 100644
--- a/index.js
+++ b/index.js
@@ -34,9 +34,26 @@ const convertPluginId = (pluginId) => {
         :
             pluginId.replace(/^eslint-plugin-/u, '');
 };
-const eslintRules = node_fs_1.default
-    .readdirSync(node_path_1.default.join(dirname, nodeModules, 'eslint/lib/rules'))
-    .filter((rule) => rule.endsWith('.js') && !rule.includes('index'));
+const pathsToCheck = [
+  node_path_1.default.posix.join(require.resolve('eslint')),
+];
+pathsToCheck.push(require.resolve('eslint', {
+  paths: [pathsToCheck[0]]
+}));
+let eslintRules = [];
+for (const possibleEslintDirectory of pathsToCheck) {
+  try {
+    const rulesPath = node_path_1.default.posix.join(possibleEslintDirectory, '../rules');
+    eslintRules = node_fs_1.default
+      .readdirSync(rulesPath)
+      .filter((rule) => rule.endsWith('.js') && !rule.includes('index'));
+  } catch (error) {
+    if (error.code === 'ENOENT') {
+      continue;
+    }
+    throw error;
+  }
+}
 for (const rule of eslintRules) {
     const rulePath = node_path_1.default.posix.join(dirname, nodeModules, 'eslint/lib/rules', rule);
     const importedRule = require(rulePath);
@@ -47,7 +64,8 @@ const eslintPlugins = node_fs_1.default
     .readdirSync(node_path_1.default.join(dirname, nodeModules))
     .filter((plugin) => (plugin.startsWith('eslint-plugin') || plugin.startsWith('@')) &&
     plugin !== 'eslint-plugin-disable-autofix' &&
-    plugin !== '@eslint');
+    plugin !== '@eslint' &&
+    plugin !== '@types');
 for (const plugin of eslintPlugins) {
     if (plugin.includes('@')) {
         const pluginDirectories = node_fs_1.default
