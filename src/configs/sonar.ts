import {ERROR, OFF, WARNING} from '../constants';
import {ConfigEntryBuilder, type ConfigSharedOptions} from '../eslint';
import {pluginsLoaders} from '../plugins';
import {assignDefaults} from '../utils';
import type {UnConfigFn} from './index';

export interface SonarEslintConfigOptions extends ConfigSharedOptions<'sonarjs'> {
  /**
   * Enables rules that are specific to AWS
   * @default true
   */
  enableAwsRules?: boolean;

  /**
   * Enables rules that are specific to test or assertion libraries
   * @default true
   */
  testsRules?: boolean;
}

export const sonarUnConfig: UnConfigFn<'sonar'> = async (context) => {
  const eslintPluginSonar = await pluginsLoaders.sonarjs();

  const optionsRaw = context.rootOptions.configs?.sonar;
  const optionsResolved = assignDefaults(optionsRaw, {
    enableAwsRules: true,
    testsRules: true,
  } satisfies SonarEslintConfigOptions);

  const {enableAwsRules, testsRules} = optionsResolved;

  const awsRulesSeverity = enableAwsRules ? ERROR : OFF;
  const testsRulesSeverity = testsRules ? ERROR : OFF;

  const configBuilder = new ConfigEntryBuilder('sonarjs', optionsResolved, context);

  // Legend:
  // 游릭 - in Recommended
  // 游댮 - deprecated
  // 游눬 - requires type information
  // 游댟 - rule for regular expressions
  // 游빍 - rule for testing frameworks
  // 游닍 - rule for specific package(s) or node module(s)
  // 丘멆잺 - rule is disabled (or kept disabled) because it overlaps with other rule(s) or by other reason(s) listed hereinafter
  // 游댯 - JSX/HTML rule

  configBuilder
    .addConfig(['sonar', {includeDefaultFilesAndIgnores: true}])
    .addBulkRules(eslintPluginSonar.configs.recommended.rules)
    // .addRule('anchor-precedence', ERROR) // 游릭游눬游댟
    // 丘멆잺 Handled by TypeScript
    .addRule('argument-type', OFF) // 游릭游눬
    // .addRule('arguments-order', ERROR) // 游릭游눬
    // 丘멆잺 `prefer-rest-params`
    // .addRule('arguments-usage', OFF)
    // 丘멆잺 Handled by TypeScript
    .addRule('array-callback-without-return', OFF) // 游릭游눬
    // 丘멆잺 `no-array-constructor`, `unicorn/no-new-array`
    // .addRule('array-constructor', OFF)
    // 丘멆잺 Prettier
    // .addRule('arrow-function-convention', OFF)
    .addRule('assertions-in-tests', testsRulesSeverity) // 游릭游빍
    .addRule('aws-apigateway-public-api', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-ec2-rds-dms-public', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-ec2-unencrypted-ebs-volume', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-efs-unencrypted', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-iam-all-privileges', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-iam-all-resources-accessible', OFF) // 游닍 `aws-cdk-lib`
    .addRule('aws-iam-privilege-escalation', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-iam-public-access', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-opensearchservice-domain', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-rds-unencrypted-databases', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-restricted-ip-admin-access', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-s3-bucket-granted-access', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-s3-bucket-insecure-http', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-s3-bucket-public-access', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-s3-bucket-server-encryption', OFF) // 游댮 游닍 `aws-cdk-lib`
    .addRule('aws-s3-bucket-versioning', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-sagemaker-unencrypted-notebook', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-sns-unencrypted-topics', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    .addRule('aws-sqs-unencrypted-queue', awsRulesSeverity) // 游릭 游닍 `aws-cdk-lib`
    // Note: doesn't seem to work in TypeScript code
    // .addRule('bitwise-operators', ERROR) // 游릭
    // 丘멆잺 `block-scoped-var`, `vars-on-top`
    .addRule('block-scoped-var', OFF) // 游릭
    // .addRule('bool-param-default', OFF)
    // 丘멆잺 Prettier
    .addRule('call-argument-line', OFF) // 游릭
    // .addRule('certificate-transparency', ERROR) // 游릭 游닍 `helmet`
    .addRule('chai-determinate-assertion', testsRulesSeverity) // 游릭游빍 游닍 `chai`
    // 丘멆잺 `camelcase`
    .addRule('class-name', OFF) // 游릭
    // .addRule('class-prototype', OFF) // 游눬
    // 丘멆잺 `no-eval`, `no-script-url`, `no-new-func`
    .addRule('code-eval', OFF) // 游릭
    // 丘멆잺 Unreliable metric and cannot be universally applied to all projects
    .addRule('cognitive-complexity', OFF) // 游릭
    // .addRule('comma-or-logical-or-case', ERROR) // 游릭
    // .addRule('comment-regex', OFF)
    // 丘멆잺 `regexp/prefer-w`, `regexp/prefer-plus-quantifier`
    .addRule('concise-regex', OFF) // 游릭游눬游댟
    .addRule('conditional-indentation', OFF) // 游댮
    // .addRule('confidential-information-logging', ERROR) // 游릭 游닍 `signale`
    // 丘멆잺 `no-new`
    .addRule('constructor-for-side-effects', OFF) // 游릭
    // .addRule('content-length', ERROR) // 游릭 游닍 `formidable`, `multer`, `body-parser`
    // .addRule('content-security-policy', ERROR) // 游릭 游닍 `helmet`
    // .addRule('cookie-no-httponly', ERROR) // 游릭 游닍 `cookie-session`, `express-session`, `cookies`, `csurf`
    // .addRule('cookies', OFF) // 游댮
    // .addRule('cors', ERROR) // 游릭 游닍 `node:http`, `cors`
    // .addRule('csrf', ERROR) // 游릭 游닍 `csurf`
    // .addRule('cyclomatic-complexity', OFF)
    // .addRule('declarations-in-global-scope', OFF)
    // 丘멆잺 `import/no-deprecated`, `@typescript-eslint/no-deprecated` which also likely do the job better
    .addRule('deprecation', OFF) // 游릭游눬
    // .addRule('destructuring-assignment-syntax', OFF)
    // 丘멆잺 Other rules & TypeScript itself; has false positives
    .addRule('different-types-comparison', OFF) // 游릭游눬
    // .addRule('disabled-auto-escaping', ERROR) // 游릭游눬 游닍 `mustache`, `handlebars`, `markdown-it`, `marked`, `kramed`
    // .addRule('disabled-resource-integrity', ERROR) // 游릭游눬
    .addRule('disabled-timeout', testsRulesSeverity) // 游릭游빍
    // .addRule('dns-prefetching', OFF) // 游댮
    // 丘멆잺 `regexp/no-dupe-characters-character-class`
    .addRule('duplicates-in-character-class', OFF) // 游릭游눬游댟
    // .addRule('elseif-without-else', OFF)
    // 丘멆잺 `regexp/no-empty-group` (and also `sonarjs/no-empty-group`), `regexp/no-empty-alternative`, `regexp/no-trivially-nested-quantifier`
    .addRule('empty-string-repetition', OFF) // 游릭游눬游댟
    // .addRule('encryption', OFF) // 游댮
    // .addRule('encryption-secure-mode', ERROR) // 游릭 游닍 `node:crypto`
    // .addRule('enforce-trailing-comma', OFF) // 游댮
    // Not disabling because, despite being mostly covered by `regexp/no-useless-dollar-replacements` rule, finds more problems
    // .addRule('existing-groups', ERROR) // 游릭游눬游댟
    // .addRule('expression-complexity', OFF)
    // .addRule('file-header', OFF)
    // .addRule('file-name-differ-from-class', OFF)
    // .addRule('file-permissions', ERROR) // 游릭 游닍 `node:fs`, `node:process`
    // .addRule('file-uploads', ERROR) // 游릭 游닍 `formidable`, `multer`
    // 丘멆잺 Completely forbids FIXME comments
    .addRule('fixme-tag', OFF) // 游릭
    // Reason for not enabling: covered by `guard-for-in` rule
    // .addRule('for-in', OFF)
    // .addRule('for-loop-increment-sign', ERROR) // 游릭
    // .addRule('frame-ancestors', ERROR) // 游릭 游닍 `helmet`
    // 丘멆잺 IMHO too restrictive + some cases covered by `unicorn/consistent-function-scoping`
    .addRule('function-inside-loop', OFF) // 游릭
    // .addRule('function-name', OFF)
    // 丘멆잺 certainly not for everyone
    .addRule('function-return-type', OFF) // 游릭游눬
    // .addRule('future-reserved-words', ERROR) // 游릭
    // 丘멆잺 `require-yield`. Does not seem to report on empty yields like `yield;`
    .addRule('generator-without-yield', OFF) // 游릭
    // .addRule('hashing', ERROR) // 游릭 游닍 `node:crypto`
    // .addRule('hidden-files', ERROR) // 游릭 游닍 `serve-static`
    // 丘멆잺 Handled by TypeScript
    .addRule('in-operator-type-error', OFF) // 游릭游눬
    // .addRule('inconsistent-function-call', ERROR) // 游릭
    // .addRule('index-of-compare-to-positive-number', ERROR) // 游릭游눬
    // .addRule('insecure-cookie', ERROR) // 游릭 游닍 `cookie-session`, `express-session`, `cookies`, `csurf`
    // .addRule('insecure-jwt-token', ERROR) // 游릭 游닍 `jsonwebtoken`
    .addRule('inverted-assertion-arguments', testsRulesSeverity) // 游릭游빍 游닍 `chai`
    // .addRule('jsx-no-leaked-render', ERROR) // 游릭游눬游댯
    // 丘멆잺 `no-labels`
    .addRule('label-position', OFF) // 游릭
    // TODO not sure if this is needed now
    // .addRule('link-with-target-blank', ERROR) // 游릭
    // .addRule('max-lines', OFF)
    // .addRule('max-lines-per-function', OFF)
    // 丘멆잺 Not for every project
    .addRule('max-switch-cases', OFF) // 游릭
    // .addRule('max-union-size', OFF)
    .addRule('misplaced-loop-counter', WARNING) // 游릭
    // .addRule('nested-control-flow', OFF)
    // 丘멆잺 Handled by TypeScript
    .addRule('new-operator-misuse', OFF) // 游릭游눬
    // .addRule('no-all-duplicated-branches', ERROR) // 游릭
    // 丘멆잺 Seems too restrictive for me, alphabetical sorting is not a very rare requirement
    .addRule('no-alphabetical-sort', OFF) // 游릭游눬
    // .addRule('no-angular-bypass-sanitization', ERROR) // 游릭 游닍 `@angular/*`
    // 丘멆잺 `@typescript-eslint/no-array-delete`; works on TS code only anyway
    .addRule('no-array-delete', OFF) // 游릭游눬
    // 丘멆잺 Handled by TypeScript
    .addRule('no-associative-arrays', OFF) // 游릭游눬
    // 丘멆잺 Seems too restrictive for me
    .addRule('no-async-constructor', OFF) // 游릭
    // Reason for keeping disabled: should mostly be covered by `no-global-assign`
    // .addRule('no-built-in-override', OFF)
    // .addRule('no-case-label-in-switch', ERROR) // 游릭
    .addRule('no-clear-text-protocols', WARNING) // 游릭 游닍 `nodemailer`, `ftp`, `telnet-client`, `aws-cdk-lib`
    .addRule('no-code-after-done', testsRulesSeverity) // 游릭游빍 游닍 `chai`
    // .addRule('no-collapsible-if', OFF)
    // TODO disable autofix?
    // .addRule('no-collection-size-mischeck', ERROR) // 游릭游눬
    // 丘멆잺 Seems too restrictive
    .addRule('no-commented-code', OFF) // 游릭
    // 丘멆잺 `regexp/no-control-character`
    .addRule('no-control-regex', OFF) // 游릭游눬游댟
    // 丘멆잺 `no-useless-assignment`
    .addRule('no-dead-store', OFF) // 游릭
    // .addRule('no-delete-var', ERROR) // 游릭
    // 丘멆잺 `@typescript-eslint/no-duplicate-type-constituents`
    .addRule('no-duplicate-in-composite', OFF) // 游릭
    // .addRule('no-duplicate-string', OFF)
    // .addRule('no-duplicated-branches', ERROR) // 游릭
    // .addRule('no-element-overwrite', ERROR) // 游릭
    // Reason for keeping enabled: not caught by eslint-plugin-regexp
    // .addRule('no-empty-after-reluctant', ERROR) // 游릭游눬游댟
    // 丘멆잺 `regexp/no-empty-alternative`
    .addRule('no-empty-alternatives', OFF) // 游릭游눬游댟
    // 丘멆잺 `regexp/no-empty-character-class`
    .addRule('no-empty-character-class', OFF) // 游릭游눬游댟
    // .addRule('no-empty-collection', ERROR) // 游릭
    // 丘멆잺 `regexp/no-empty-group`
    .addRule('no-empty-group', OFF) // 游릭游눬游댟
    // 丘멆잺 It seems fragile to me that this rule does not give the control over which files to consider as test files: "This rule flags any file that has .test or .spec as part of its suffix but does not contain any test cases defined using the different forms of the it and test functions from Jasmine, Jest, Mocha, or Node.js testing API."
    .addRule('no-empty-test-file', OFF) // 游릭游빍
    // .addRule('no-equals-in-for-termination', ERROR) // 游릭
    // 丘멆잺 `jest/no-focused-tests`, `vitest/no-focused-tests`. For other testing frameworks, one can enable this rule manually
    .addRule('no-exclusive-tests', OFF) // 游릭游빍
    // .addRule('no-extra-arguments', ERROR) // 游릭
    // 丘멆잺 `no-fallthrough`
    .addRule('no-fallthrough', OFF) // 游릭
    .addRule('no-for-in-iterable', ERROR) // 游눬
    // .addRule('no-function-declaration-in-block', OFF)
    // .addRule('no-global-this', ERROR) // 游릭
    // Note: with cases noncompliant with this rule, ESLint fails on parsing stage anyway due to the assuming of being in a strict mode
    // .addRule('no-globals-shadowing', ERROR) // 游릭
    // .addRule('no-gratuitous-expressions', ERROR) // 游릭
    // Warning because has false positives (triggered on any strings looking like IP addresses)
    .addRule('no-hardcoded-ip', WARNING) // 游릭 游닍 `node:net`
    // .addRule('no-hardcoded-passwords', ERROR) // 游릭 游닍 `mysql`
    // "This rule detects variables/fields having a name matching a list of words (secret, token, credential, auth, api[_.-]?key) being assigned a pseudorandom hard-coded value. The pseudorandomness of the hard-coded value is based on its entropy and the probability to be human-readable."
    // .addRule('no-hardcoded-secrets', ERROR) // 游릭
    // .addRule('no-hook-setter-in-body', ERROR) // 游릭 游닍 `react`
    // 丘멆잺 `no-dupe-else-if`, `no-duplicate-case`
    .addRule('no-identical-conditions', OFF) // 游릭
    // Note: partially overlaps with `no-self-compare`
    // .addRule('no-identical-expressions', ERROR) // 游릭
    // .addRule('no-identical-functions', ERROR) // 游릭
    // .addRule('no-ignored-exceptions', ERROR) // 游릭
    // .addRule('no-ignored-return', ERROR) // 游릭游눬
    // Reason for keeping disabled: should mostly be covered by `import/no-extraneous-dependencies`
    .addRule('no-implicit-dependencies', OFF)
    // .addRule('no-implicit-global', ERROR) // 游릭
    // .addRule('no-in-misuse', ERROR) // 游릭游눬
    .addRule('no-incomplete-assertions', testsRulesSeverity) // 游릭游빍 游닍 `chai`
    // 丘멆잺 `consistent-return`
    // .addRule('no-inconsistent-returns', OFF)
    // 丘멆잺 `@typescript-eslint/restrict-plus-operands`
    // .addRule('no-incorrect-string-concat', OFF) // 游눬
    // .addRule('no-internal-api-use', ERROR) // 游릭
    // .addRule('no-intrusive-permissions', ERROR) // 游릭
    // 丘멆잺 `@typescript-eslint/await-thenable`, `unicorn/no-unnecessary-await`
    .addRule('no-invalid-await', OFF) // 游릭游눬
    // 丘멆잺 `regexp/no-invalid-regexp`
    .addRule('no-invalid-regexp', OFF) // 游릭游눬游댟
    // .addRule('no-invariant-returns', ERROR) // 游릭
    // .addRule('no-inverted-boolean-check', ERROR) // 游릭
    // .addRule('no-ip-forward', ERROR) // 游릭 游닍 `node-http-proxy`, `http-proxy-middleware`
    // 丘멆잺 `no-labels`
    .addRule('no-labels', OFF) // 游릭
    // Note: seems usable in .js files only
    // .addRule('no-literal-call', ERROR) // 游릭
    // .addRule('no-mime-sniff', ERROR) // 游릭 游닍 `helmet`
    // .addRule('no-misleading-array-reverse', ERROR) // 游릭游눬
    // 丘멆잺 `regexp/no-misleading-unicode-character`
    .addRule('no-misleading-character-class', OFF) // 游릭游눬游댟
    // .addRule('no-mixed-content', ERROR) // 游릭 游닍 `helmet`
    // 丘멆잺 Too noisy in practice
    .addRule('no-nested-assignment', OFF) // 游릭
    // 丘멆잺 Too noisy in practice
    .addRule('no-nested-conditional', OFF) // 游릭
    // 丘멆잺 Too noisy in practice
    .addRule('no-nested-functions', OFF) // 游릭
    // .addRule('no-nested-incdec', OFF)
    // .addRule('no-nested-switch', OFF)
    // 丘멆잺 Seems too restrictive for me
    .addRule('no-nested-template-literals', OFF) // 游릭
    // 丘멆잺 `no-unreachable-loop`
    .addRule('no-one-iteration-loop', OFF) // 游릭
    // .addRule('no-os-command-from-path', ERROR) // 游릭 游닍 `node:child_process`
    // .addRule('no-parameter-reassignment', ERROR) // 游릭
    // 丘멆잺 `no-new-wrappers`
    .addRule('no-primitive-wrappers', OFF) // 游릭
    // .addRule('no-redundant-assignments', ERROR) // 游릭
    // .addRule('no-redundant-boolean', ERROR) // 游릭
    // .addRule('no-redundant-jump', ERROR) // 游릭
    // .addRule('no-redundant-optional', ERROR) // 游릭游눬
    // .addRule('no-redundant-parentheses', OFF) // 游댮
    // .addRule('no-reference-error', OFF)
    // .addRule('no-referrer-policy', ERROR) // 游릭 游닍 `helmet`
    // 丘멆잺 `no-regex-spaces`, `regexp/prefer-quantifier`
    .addRule('no-regex-spaces', OFF) // 游릭游눬游댟
    // .addRule('no-require-or-define', OFF) // 游눬
    // .addRule('no-return-type-any', OFF) // 游눬
    .addRule('no-same-argument-assert', testsRulesSeverity) // 游릭游빍 游닍 `chai`
    // 丘멆잺 Purely stylistic, handled by Prettier
    .addRule('no-same-line-conditional', OFF) // 游릭
    // 丘멆잺 Unsure about this one, it seems to me that it might disallow "normal" code which could be hard to "fix"
    .addRule('no-selector-parameter', OFF) // 游릭游눬
    // 丘멆잺 `jest/no-disabled-tests`, `vitest/no-disabled-tests`
    .addRule('no-skipped-tests', OFF) // 游릭游빍
    // .addRule('no-small-switch', ERROR) // 游릭
    // .addRule('no-sonar-comments', OFF)
    // .addRule('no-tab', OFF) // 游댮
    // .addRule('no-table-as-layout', ERROR) // 游릭游댯
    // 丘멆잺 Reports on promise-returning functions marked with `void `
    .addRule('no-try-promise', OFF) // 游릭游눬
    // .addRule('no-undefined-argument', ERROR) // 游릭游눬
    // 丘멆잺 Useful in some scenarios, for example in `mongoose` to remove the property from the document
    // .addRule('no-undefined-assignment', OFF)
    // 丘멆잺 `curly` and Prettier
    .addRule('no-unenclosed-multiline-block', OFF) // 游릭
    // .addRule('no-uniq-key', ERROR) // 游릭游댯
    // .addRule('no-unsafe-unzip', ERROR) // 游릭 游닍 `tar`, `adm-zip`, `jszip`, `yauzl`, `extract-zip`
    // 丘멆잺 `no-new`
    .addRule('no-unthrown-error', OFF) // 游릭
    // .addRule('no-unused-collection', ERROR) // 游릭
    // .addRule('no-unused-function-argument', OFF)
    // 丘멆잺 `no-unused-vars`
    .addRule('no-unused-vars', OFF) // 游릭
    // .addRule('no-use-of-empty-return-value', ERROR) // 游릭
    // 丘멆잺 `no-useless-catch`
    .addRule('no-useless-catch', OFF) // 游릭
    // .addRule('no-useless-increment', ERROR) // 游릭
    // Reason for disabling: disallows `string & {}` pattern and has false positives
    .addRule('no-useless-intersection', OFF) // 游릭游눬
    // .addRule('no-useless-react-setstate', ERROR) // 游릭 游닍 `react`
    // 丘멆잺 `no-use-before-define`, `block-scoped-var`, `vars-on-top`
    // .addRule('no-variable-usage-before-declaration', OFF)
    // 丘멆잺 `vue/no-v-html`. Also finds problems in Vue 2 render functions
    .addRule('no-vue-bypass-sanitization', OFF) // 游릭
    // .addRule('no-weak-cipher', ERROR) // 游릭 游닍 `node:crypto`
    // .addRule('no-weak-keys', ERROR) // 游릭 游닍 `node:crypto`
    // .addRule('no-wildcard-import', OFF)
    // .addRule('non-existent-operator', ERROR) // 游릭
    // 丘멆잺 TypeScript
    // .addRule('non-number-in-arithmetic-expression', OFF) // 游눬
    // 丘멆잺 TypeScript
    .addRule('null-dereference', OFF) // 游릭游눬
    // .addRule('object-alt-content', ERROR) // 游릭游댯
    // 丘멆잺 TypeScript
    // .addRule('operation-returning-nan', OFF) // 游눬
    // .addRule('os-command', ERROR) // 游릭 游닍 `node:child_process`
    // .addRule('post-message', ERROR) // 游릭游눬
    // 丘멆잺 `default-case-last`
    .addRule('prefer-default-last', OFF) // 游릭
    // .addRule('prefer-immediate-return', OFF)
    .addRule('prefer-object-literal', ERROR)
    // .addRule('prefer-promise-shorthand', ERROR) // 游릭
    // 丘멆잺 IMHO this is not a common practice
    .addRule('prefer-read-only-props', OFF) // 游릭游눬
    // 丘멆잺 `RegExp.prototype.exec` mutates the state of the regexp: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec#return_value
    .addRule('prefer-regexp-exec', OFF) // 游릭游눬游댟
    .addRule('prefer-single-boolean-return', WARNING) // 游릭
    // .addRule('prefer-type-guard', ERROR) // 游릭
    // .addRule('prefer-while', ERROR) // 游릭
    // .addRule('process-argv', OFF) // 游댮
    .addRule('production-debug', ERROR) // 游릭 游닍 `errorhandler`
    // 丘멆잺 Simply reports on every usage of `Math.random`
    .addRule('pseudo-random', OFF) // 游릭
    // .addRule('public-static-readonly', ERROR) // 游릭
    // .addRule('publicly-writable-directories', ERROR) // 游릭 游닍 `node:fs`
    // .addRule('reduce-initial-value', ERROR) // 游릭游눬
    // 丘멆잺 Sometimes this technique is useful
    .addRule('redundant-type-aliases', OFF) // 游릭
    .addRule('regex-complexity', WARNING, [{threshold: 40}]) // 游릭游눬游댟
    // .addRule('regular-expr', OFF) // 游댮游댟
    // .addRule('session-regeneration', ERROR) // 游릭 游닍 `passport`
    // .addRule('shorthand-property-grouping', OFF)
    // 丘멆잺 `regexp/no-useless-character-class`
    .addRule('single-char-in-character-classes', OFF) // 游릭游눬游댟
    // 丘멆잺 `regexp/prefer-character-class`
    .addRule('single-character-alternation', OFF) // 游릭游눬游댟
    // 丘멆잺 `regexp/no-super-linear-backtracking`
    .addRule('slow-regex', OFF) // 游릭游눬游댟
    // .addRule('sockets', OFF) // 游댮 游닍 `node:net`
    // .addRule('sql-queries', ERROR) // 游릭 游닍 `mysql`, `pg`
    .addRule('stable-tests', testsRulesSeverity) // 游릭
    // .addRule('standard-input', OFF) // 游댮
    // .addRule('stateful-regex', ERROR) // 游릭游댟
    // .addRule('strict-transport-security', ERROR) // 游릭 游닍 `helmet`
    .addRule('strings-comparison', WARNING) // 游눬
    // 丘멆잺 `constructor-super`
    .addRule('super-invocation', OFF) // 游릭
    .addRule('table-header', WARNING) // 游릭游댯
    .addRule('table-header-reference', WARNING) // 游릭游댯
    // .addRule('test-check-exception', ERROR) // 游릭游빍 游닍 `chai`
    // Reason for disabling: completely forbids TODO comments and has false positives
    .addRule('todo-tag', OFF) // 游릭
    // .addRule('too-many-break-or-continue-in-loop', OFF)
    // 丘멆잺 TypeScript
    // .addRule('unicode-aware-regex', OFF) // 游댟游눬
    // `unused-imports/no-unused-imports`, `@typescript-eslint/no-unused-vars`, `no-unused-vars`
    .addRule('unused-import', OFF) // 游릭游눬
    // .addRule('unused-named-groups', ERROR) // 游릭游눬游댟
    // .addRule('unverified-certificate', ERROR) // 游릭 游닍 `node:https`, `node:tls`
    .addRule('unverified-hostname', ERROR) // 游릭 游닍 `node:https`, `node:tls`
    // 丘멆잺 `no-const-assign`
    .addRule('updated-const-var', OFF) // 游릭
    .addRule('updated-loop-counter', WARNING) // 游릭
    .addRule('use-type-alias', WARNING) // 游릭
    // 丘멆잺 `sonarjs/no-ignored-return`
    // .addRule('useless-string-operation', OFF) // 游댮游눬
    // 丘멆잺 TypeScript
    // .addRule('values-not-convertible-to-numbers', OFF) // 游눬
    // .addRule('variable-name', OFF)
    // 丘멆잺 `no-void`
    .addRule('void-use', OFF) // 游릭游눬
    // .addRule('weak-ssl', ERROR) // 游릭 游닍 `node:https`, `node:tls`
    // .addRule('web-sql-database', OFF) // 游댮游눬
    // .addRule('x-powered-by', ERROR) // 游릭 游닍 `express`, `helmet`
    // .addRule('xml-parser-xxe', ERROR) // 游릭 游닍 `libxmljs`
    // .addRule('xpath', OFF) // 游댮 游닍 `xpath`, `xmldom`
    .addOverrides();

  return {
    configs: configBuilder.getAllConfigs(),
    optionsResolved,
  };
};
