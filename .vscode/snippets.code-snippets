{
	// Place your eslint-config-un workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  "eslint-config-un new config": {
    "prefix": "un-new-config",
    "body": [
      "import {ERROR, OFF, WARNING} from '../constants';",
      "import {ConfigEntryBuilder, type ConfigSharedOptions} from '../eslint';",
      "import {pluginsLoaders} from '../plugins';",
      "import {assignDefaults} from '../utils';",
      "import type {UnConfigFn} from './index';",
      "",
      "export interface ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}EslintConfigOptions extends ConfigSharedOptions<'$TM_FILENAME_BASE'> {",
      "\t/**",
      "\t * [`eslint-plugin-$TM_FILENAME_BASE`](https://www.npmjs.com/package/eslint-plugin-$TM_FILENAME_BASE) plugin",
      "\t * [shared settings](https://eslint.org/docs/latest/use/configure/configuration-files#configuring-shared-settings)",
      "\t * that will be assigned to `${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}` property and applied to the specified `files` and `ignores`.",
      "\t */",
      "\tsettings?: {};",
      "}",
      "",
      "export const ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}UnConfig: UnConfigFn<'${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}'> = async (",
      "\tcontext,",
      ") => {",
      "const eslintPlugin${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} = await pluginsLoaders['$TM_FILENAME_BASE']();",
      "",
      "\tconst optionsRaw = context.rootOptions.configs?.${TM_FILENAME_BASE/(.*)/${1:/camelcase}/};",
      "\tconst optionsResolved = assignDefaults(optionsRaw, {} satisfies ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}EslintConfigOptions);",
      "",
      "\tconst {settings: pluginSettings} = optionsResolved;",
      "",
      "\tconst configBuilder = new ConfigEntryBuilder('$TM_FILENAME_BASE', optionsResolved, context);",
      "",
      "\tconfigBuilder",
      "\t\t.addConfig(['$TM_FILENAME_BASE', {includeDefaultFilesAndIgnores: true}], {",
      "\t\t\t...(pluginSettings && {",
      "\t\t\t\tsettings: {",
      "\t\t\t\t\t${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}: pluginSettings,",
      "\t\t\t\t},",
      "\t\t\t}),",
      "\t\t})",
      "\t\t.addBulkRules(eslintPlugin${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}.configs.recommended.rules)",
      "\t\t.addRule('', ERROR)",
      "\t\t.addRule('', ERROR)",
      "\t\t.addOverrides();",
      "",
      "\treturn {",
      "\t\tconfigs: [...configBuilder.getAllConfigs()],",
      "\t\toptionsResolved,",
      "\t};",
      "}",
      "",
    ]
  },
}
